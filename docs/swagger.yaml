basePath: /api/v1
definitions:
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.ResendOTPReq:
    properties:
      token:
        type: string
    type: object
  models.UserProfile:
    properties:
      user_avatar:
        type: string
      user_birthday:
        type: string
      user_fullname:
        type: string
      user_gender:
        type: boolean
      user_mobile:
        type: string
      user_nickname:
        type: string
    type: object
  models.VerifyOTPReq:
    properties:
      otp:
        type: string
      token:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: duyphong0280@gmail.com
    name: Philip Nguyen
  description: EzyMark Fiber API provides endpoints for managing products, orders,
    and users in an e-commerce system.
  license:
    name: MIT
    url: https://github.com/phongnd2802/ezy-mark/blob/main/LICENSE
  termsOfService: http://swagger.io/terms/
  title: EzyMark Fiber API
  version: "1.0"
paths:
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the authenticated user by revoking their session and tokens.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Logout
      tags:
      - Authentication Management
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh Access Token
      tags:
      - Authentication Management
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resend OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ResendOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Resend OTP
      tags:
      - Authentication Management
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - Authentication Management
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register user with email and password
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Register
      tags:
      - Authentication Management
  /auth/verify-otp:
    get:
      consumes:
      - application/json
      description: Get Time To Live OTP
      parameters:
      - description: Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get TTL OTP
      tags:
      - Authentication Management
    post:
      consumes:
      - application/json
      description: Authenticate OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.VerifyOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Verify OTP
      tags:
      - Authentication Management
  /user/get-info:
    get:
      consumes:
      - application/json
      description: Fetch the authenticated user's profile information.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserProfile'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve User Information
      tags:
      - UserInfo Management
swagger: "2.0"
