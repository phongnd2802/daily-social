// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserProfile = `-- name: GetUserProfile :one
SELECT "user_id", "user_email", "user_nickname", "user_fullname", 
"user_avatar", "user_mobile", "user_gender", "user_birthday"
FROM "user_profile"
WHERE "user_id" = $1
`

type GetUserProfileRow struct {
	UserID       int64          `json:"user_id"`
	UserEmail    string         `json:"user_email"`
	UserNickname string         `json:"user_nickname"`
	UserFullname pgtype.Text    `json:"user_fullname"`
	UserAvatar   pgtype.Text    `json:"user_avatar"`
	UserMobile   pgtype.Text    `json:"user_mobile"`
	UserGender   NullGenderEnum `json:"user_gender"`
	UserBirthday pgtype.Date    `json:"user_birthday"`
}

func (q *Queries) GetUserProfile(ctx context.Context, userID int64) (GetUserProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i GetUserProfileRow
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserNickname,
		&i.UserFullname,
		&i.UserAvatar,
		&i.UserMobile,
		&i.UserGender,
		&i.UserBirthday,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE "user_profile" 
SET 
    "user_nickname" = COALESCE($1, user_nickname),
    "user_fullname" = COALESCE($2, user_fullname),
    "user_avatar" = COALESCE($3, user_avatar),
    "user_mobile" = COALESCE($4, user_mobile),
    "user_gender" = COALESCE($5, user_gender),
    "user_birthday" = COALESCE($6, user_birthday),
    "updated_at" = now()
WHERE "user_id" = $7
RETURNING user_id, user_email, user_nickname, user_fullname, user_avatar, user_mobile, user_gender, user_birthday, created_at, updated_at
`

type UpdateUserProfileParams struct {
	UserNickname string         `json:"user_nickname"`
	UserFullname pgtype.Text    `json:"user_fullname"`
	UserAvatar   pgtype.Text    `json:"user_avatar"`
	UserMobile   pgtype.Text    `json:"user_mobile"`
	UserGender   NullGenderEnum `json:"user_gender"`
	UserBirthday pgtype.Date    `json:"user_birthday"`
	UserID       int64          `json:"user_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.UserNickname,
		arg.UserFullname,
		arg.UserAvatar,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserID,
	)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserNickname,
		&i.UserFullname,
		&i.UserAvatar,
		&i.UserMobile,
		&i.UserGender,
		&i.UserBirthday,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
